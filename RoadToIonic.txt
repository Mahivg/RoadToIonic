Ionic with Angular: 

	html, css, JS => web development => Browser => Browser Engine ( Chrome v8 ), 
	
	
	
	Datatypes
	
	functions
	
	iteration
	
	
	Javascript: 
	
		-> Language of browser
		
		-> User Interaction
		
		-> NodeJS => MEAN => MongoDB, ExpressJS, Angular, NodeJS
					 MERN => MongoDB, ExpressJS, ReactJS, NodeJS
					 
		-> browser console 
		
			window, document
			
		-> type less or dynamic type programimng language
		
		
		-> Javascript language following ECMA Specification pattern (ECMA => European Computer manufacturar assocition)
			
		
	DataTypes:
	
		number => 12, 1.2, -10, 
		
		string => "text", 'textt', `Text
			skbkdfds
			nksdfndsjds `
			
		boolean => true, false
		
		object => { "key" : "value" }
		
		json => { "key" : : "value" }
		
		Array => [1,2,3]
		
	 Variable Declaration:
	 
	 
		var, let, const
		
		var myStr = "test";
		
		let myStr = "test";
		
		const myStr = "test";
		
		
		1. should not start with _ || number 
		
		2. camelCase
		
			myName, getMyName()
			
		3. meaningful
		
		4. should not contain any space
		
		
			var my name = "";
		
		
		
		{
			let myStr = ""'
		}
		
		
		
		Array Funcitons :
		
			map => convert array into another array
			
			filter => based on condition		
		
			forEach =>
			
			findIndex => 
			
			find =>
			
		
		Cosntional statment:
		
		
		if(booelan || condition to return boolean) {
			
			
			
		}
		
		else if () {
		
		}
		
		else {
		
		}
			
		Relational Operators:
			==, <, >, <= , >= , ===
			
			
			
		Function:
		
			1990 => ES3, ES4, 
			
			2015 => ES5, ES2015
			
			2016 => ES6 ( => Lambda )
			
			
		
		UserInteraction:
		
		
			document => getElementById, getElementsByClassName, getElementsByTagName
			
						querySelector, querySelectorAll
						
	
	
		backEnd app
		
			Java, python
			
				RestFul API => 'https://www.domain.com/v1/employees' ('GET' , 'POST' , 'PUT', 'DELETE')
				
					=> Request -> GET(--), POST (ADD) || PUT (UPDATE) (obj)
					
					=> Response -> Response
				
		
		XMLHttpRequest
			- 
			
	
	
		DisAdv JS:
		
			1. Typeless | Dynamic typing
			
			2. addtional code
			
		Google => AngualrJS (Angualr1) => javascript
		
		Angular 2 -> 9 => Typscript
		
			
			1. Typed Language
			
			2. Compile time error
			
			3.  Typescript script => JS
			
			
			function login(userName, password) { }
			
			
			function login(userName: string, password:string){}
		
	
	
	 Typescript:
	 
		1. superset of javascript
		
		2. Types => Typed Javasript
		
		3. OOPS
		
		4. Compiler
		
		5. compile time error
		
		
	Environment Setup:
	
		1. NodeJS
			
			node and npm 
			
				node
				
				npm => bootstrap 
				
				npm i bootstrap 
				
				node_modules
				
					bootstrap
						dist						
						css
						js
						
				package.json
				
				{					
				
					"dependencies" : {
					
						"bootstrap" : "^4.0.0"
					}
					
				}
				
		2. Typescirpt
			
			npm install -g typescript
			
			
			1. my-scirpt.ts
			
				tsc my-scirpt.ts => my-scirpt.js
				
				tsc --init
				
				
				
				
			DataTypes:
			
				number string, boolean, objeect, Array, Tuple, Union, enum, class
				
				
		
		
		Angular
			
			tsconfig.json
			package.json
			
		
		
		VS code extension:			
			ESLint
			Prettier
			Debugger for chrome
			Path intelisense
			Material Icon Theme
			Dracula theme
			
			
			
			
		Angualr Framework



			module:
			
				shopping- list => list out
				
				shpoing-detail-view =>
				
				
				shopping.module => [shopping-list, shopping-detail]
				
				
				shopping.module
				
			Form => 
			
				Angular FormsModule  => 
				
						HttpModule =>
				
				
				App Module => [ FormsModule ]
		
		
			Webpack
			
				Budling => JS, CSS
				
			
			History: 
			
				Google
					Angular => Angular Material 
				
					JS => 
					
						jQuery 
						
							document.getElementById('userName') => $('userName')
							
							
						
					AngularJS ( Angualr 1.x )
					
						SPA => one root Html => remaining partial HTML
					
						Model, view, Controller => PAttern
						
						Shopping 
						
							List => feature => HTML, CSS, JS
							
								shopping-list.html => 
								shopping-list.css => View
								shopping-list.js => Controller
								
									Product => modal
									
									
					AngularJS + Typescirpt 
					
						Angualr ( 2 to 9 )
						
						
							Advanced MVC pattern => Component || widgets
							
							one component => HTML, CSS, TS
								
								shopping-list.html => 
								shopping-list.css => View
								shopping-list.ts => Controller
								
					Html
					
						header | navbar => header.component
						
						homepage => homepage.component						
						
						footer => footer.component
						
						
					h1, h2 => predifined HTML tag
					
					<app-root></app-root>
						shopping-list.html =>  <div> Test </div>
						shopping-list.css => View
						shopping-list.ts => Controller => selector : "app-root"
						
						shopping-list.spec.ts =>
						
						
					Routing
					
						SPA
						
							index.html
							
								based on url change, if content change means that is routing
								
								<app-detail>
								
					
				
				
				
		
			package.json
			
			scripts: {
				build : "npm install build"
			},
			
				dependenciies : {
				
				
				}
				
			Environment:
			
				
				tsc
				
				ng
				
				npm install -g @angular/cli
				
				npm uninstall -g @angular/cli
				
				npm install -g @angular/cli@latest


		Angular
			
			Component
				Angular 1 -> Angular 2
				
				Angular 2 -> 9
				
					JIT compiler => Just In Time Compiler 4
					
					6 => AOT compiler => AheadOf Time Compiler
					
					9 => Ivy compiler
					
				Angualr 2 -> 9 => backward compatibilty
				
		UI Framework:
		
			desktop => Mobile => compatabilty
			
			bootstrap and Angualr material => CSS frameworks (set of clases) => bootstrap.min.css		|
			
			
		Testing:
		
			Karma|jasmine => unit test framework
			
			
				Test cases => to ensure application feature is working fine
				
				
				
	
			
			
		Ng | angualr CLI commands
		
		
			ng --version
			
			ng new ApplicationName --skipInstall=true --skipTests=true --prefix=ht
			
			ng serve => starts application and runs the application in port no : 4200
			
			http://localhost:4200 => get some view
			
			ng g
			
			
		Main.ts
			Bootrstarp => AppModule
			
		AppModule
		
			**.ts
			
			
		AppComponent => Root componet => index.html			
			header
			homepage
			footer
		
		
		Component
			selector : 'app-root',
			
				html => ''
				css => 
				ts =>
				
		Bootrstarp
		
			
			
		Component
			@Component => decorator || annotation
			
			meta data : {
				selector : 'app-root',
				templateUrl: ./app.component.html'
				
			
			}
			
			
			CSS selector
				h1 {
					color: red;
				}
				
				.test {
					color: blue;
				}
				
				input[type="text"] {
				
				}
			
			
			<h1 class="test">
			
			
			<app-root> </app-root>
			
		Directive 
		
			selector: '[app-root]'
			
			
		header
			products users log-out
			
		Login
			Logout
			
		products 
		
			product-detail
			
			product-add
	
		users		
			user-detail
			
			
		Component creation
		
			ng generate component 'componentName' --skipTests=true --prefix=ht
			
			ng g c login --skipTests=true --prefix=ht
			
			ng new MyTestApp --skipTests=true --prefix=ht||app
			
			ng g c login
			
		
			
			
		header
			products users log-out
			
		Login
			Logout
			
		products 
		
			product-detail
			
			product-add
	
		users		
			user-detail
			
		footer
		
		

	Directives
	
		isAllowUser = true;
	
		<div style="background-color: blue" >
			
		</div>
		
		1. Attribute Directive
		
			=> add additional behaviour
			
				{
					'background-color' : 'blue',
					
					'color' : 'green'
				}


				? :
				
				1 == 1 ? 'trueValue' : 'falseValue'
			
				[ngStyle]="{ 'background-color : truthy|falsy statemene ?'blue' : 'green' }"
				
						
				[ngClass] = " { 'className' : "truthy|falsy statemenent"}"
				
			=> it does'nt change the html tag tree
		2. Structural Directive
		
			=> It will alter the html tree
			
			ngIf, ngFor
			
			ngIf="truthy || falsy"
			
				<p *ngIf="1 == 1" > </p>
				
				
				<p *ngIf="1 !== 1" > </p>
				
				
				<p *ngIf="1 == 1; elseBlock" > </p>
				
				<ng-template #elseBlock>
				
					<p> </p>
				
				
				</ng-template>
				
			ngFor => iteration
			
			let nums = [1,2,3,4,5];
			
			{{ nums[0] }}			
			{{ nums[1] }}
			{{ nums[2] }}
			{{ nums[3] }}
			{{ nums[4] }}
			
			
			for(var i =0; i<nums.length ; i++ ) {
				
			}
			
			<p *ngFor="let num of nums" > {{num}} </p>
			
		3. custom directive
		
			attribute
			
			sturcutral
				
		
		Data Binding: 
		
			1. One way data binding
			
				=> Controller to Html
				
					=> String Interpolation
					
							--> {{ title }}
					
					=> property binding 
					
						[] => [myDivId]
				
				=> Html to Controller
				
					click, mouseover
					
					click => call a method in contoller
					
					<button on-click="method()" >
					<button (click)="method($event)">
							method() => should exists in controller
							
							$event => source event object
							
							
					-> Event Binding
						() => (click)
			2. Two way data binding
			
				title = "test"
				
				{{title}} => test
				
				title -> test => test1
				
				(click)=> onButtonClick()=> title = "test1";
				
				
				 [(ngModel)]="title"
				 
					Form controls
					
					FormsModule => Form controls
					
		Life Cycle Methods:
		
			@Component
			Class
			
			constructor(){}
				
				
			1.ngOnChanges => OnChanges
			
			2.ngOnInit => OnInit => After constrcutor => initialize
			
			3.ngDoCheck => DoCheck => After ngOnInit
			
			4.ngAfterContentInit =>
			
			5.ngAfterContentChecked =>
			
			6.ngAfterViewInit => component HTML
			
			7.ngAfterViewChecked => Component HTML redered
			
			8. ngOnDestroy => clean up code
			
			
			ht-test
				title
				
				html
					=> rendered
					
					
			ht-login
		
		Component Communication :
		
			1. Custom Property Binding and Event Emitter ( @Input, @Output)
			
				=> Parent and Child
				
				AppComponent
				
					.component.ts
					
						appProducts : Product[] = [
						new Product(1,'Test),
						new Product()
					]
					.component.html
						<ht-products [products]="appProducts"> </ht-products>
				
			
				 <ht-products> =>

				 Products Component
				 
				 .component.ts
				 
					title = 'test'
					
					Product => custom type  {
									  id: number;

									  name: string;

									  description: string;

									  price: number;

									  colors: string[];

									  active: boolean;
							}
					
					products: Product[];
					
					nums : number[] = [1,2,3,4,5]
				 
				.Html
					
					{{ title }}
					
					
					<div *ngFor="let num of nums">
						{{ num }} => 1,2,3,
					</div>
 
 
					<div *ngFor="let product of products">
						{{ product.name }}
					</div>
					
					
					
			
			
			Component to Html
				Property binding => []
				
			Child to parent
			
			
				Child HTML to controller
				
			Product.compoent.ts
			
				callParentEvent = new EventEmitter<string>();

				callParent() {
				
					this.callParentEvent.emit('string')
				}
				
				.component.html
					button => callParent()
					
			AppComponent.ts    
			
				onChildEmit(event) { }
				
			
				.html
				
					// (click)="displyDetails()"
				
					(callParentEvent)='onChildEmit($event)'
					
					
					
				Parent
				
					title
				
					appProducts = [....]
					
				.html
					<ht-products [products]="appProducts"></ht-products>
					
					
					Child
					 'ht-products'
						title
					
					  @Input() products = []
					  
					  
		
			@Output => Custom Event Emitter
				Products
				
					.html => Call Parent 
					
					
					.ts
						method()
					
					
				AppComponent
				
					onChildEmit()
					
					
			AppComponent
			
					<ht-header (event)="
			
				
			
			
				Header
				
				
					Emit 
					
			Service and Depency Injection
			
			
			
			Routing
			
			
			
			
					
					
			
					
			
			
				
				
				
				
				
			
				
					
						
			
		
			
			
			
			 
		
			
					
				
					
					
				
				
				
			
				
				
				
		
		
		
	
		
		
		
	 
		
	 
		
	 
			
	
			
			
		
		
		
		
	
		
	
		